/* 
LAB ACTIVITY 1: CREATING A VIEW FOR HIGH-EARNING EMPLOYEES 
OBJECTIVE: USE VIEW TO DISPLAY EMPLOYEES EARNING ABOVE DEPARTMENT AVERAGE 
*/

CREATE TABLE EEMPLOYEES (
    EMPID INT PRIMARY KEY,
    EMPNAME VARCHAR(100),
    DEPARTMENTID INT,
    SALARY DECIMAL(10, 2),
    BONUS DECIMAL(10, 2)
);

INSERT INTO EEMPLOYEES VALUES
(1, 'ALICE', 101, 70000, 5000),
(2, 'BOB', 101, 55000, 4000),
(3, 'CHARLIE', 102, 80000, 6000),
(4, 'DAVID', 102, 72000, 4500),
(5, 'EVE', 101, 90000, 7000),
(6, 'FRANK', 103, 60000, 3000),
(7, 'GRACE', 103, 50000, 2000);

GO

-- CREATE BASIC VIEW
CREATE VIEW HIGHEARNINGEMPLOYEES
AS
SELECT 
    EE.EMPID,
    EE.EMPNAME,
    EE.DEPARTMENTID,
    EE.SALARY
FROM 
    EEMPLOYEES EE
WHERE 
    EE.SALARY > (
        SELECT AVG(SALARY)
        FROM EEMPLOYEES
        WHERE DEPARTMENTID = EE.DEPARTMENTID
    );

SELECT * FROM HIGHEARNINGEMPLOYEES;

-- ENHANCEMENT: ADD BONUS COLUMN TO VIEW
ALTER VIEW HIGHEARNINGEMPLOYEES
AS
SELECT 
    EE.EMPID,
    EE.EMPNAME,
    EE.DEPARTMENTID,
    EE.SALARY,
    EE.BONUS
FROM 
    EEMPLOYEES EE
WHERE 
    EE.SALARY > (
        SELECT AVG(SALARY)
        FROM EEMPLOYEES
        WHERE DEPARTMENTID = EE.DEPARTMENTID
    );

-- ENHANCEMENT: CREATE INDEXED VIEW WITH SCHEMABINDING
ALTER VIEW DBO.V_HIGHEARNINGEMPLOYEES
WITH SCHEMABINDING
AS
SELECT 
    EE.EMPID,
    EE.EMPNAME,
    EE.DEPARTMENTID,
    EE.SALARY,
    EE.BONUS
FROM 
    DBO.EEMPLOYEES EE
JOIN 
    (
        SELECT DEPARTMENTID, AVG(SALARY) SALARYAVG
        FROM DBO.EEMPLOYEES
        GROUP BY DEPARTMENTID
    ) DEPAVG
ON 
    EE.DEPARTMENTID = DEPAVG.DEPARTMENTID
WHERE 
    EE.SALARY > DEPAVG.SALARYAVG;

GO

SET STATISTICS TIME ON;

-- TEST INDEXED VIEW
SELECT * FROM DBO.V_HIGHEARNINGEMPLOYEES;

-- EQUIVALENT QUERY WITHOUT VIEW
SELECT 
    EE.EMPID,
    EE.EMPNAME,
    EE.DEPARTMENTID,
    EE.SALARY,
    EE.BONUS
FROM 
    DBO.EEMPLOYEES EE
JOIN 
    (
        SELECT DEPARTMENTID, AVG(SALARY) SALARYAVG
        FROM DBO.EEMPLOYEES
        GROUP BY DEPARTMENTID
    ) DEPAVG
ON 
    EE.DEPARTMENTID = DEPAVG.DEPARTMENTID
WHERE 
    EE.SALARY > DEPAVG.SALARYAVG;

SET STATISTICS TIME OFF;

--------------------------------------------------------------------------------

/* 
LAB ACTIVITY 2: USING CORRELATED SUBQUERIES FOR RECENT ORDERS 
OBJECTIVE: USE CORRELATED SUBQUERY TO FETCH EACH CUSTOMER'S LATEST ORDER 
*/

DROP TABLE IF EXISTS ORDERS;
DROP TABLE IF EXISTS CUSTOMERS;

CREATE TABLE CUSTOMERS (
    CUSTOMERID INT PRIMARY KEY,
    CUSTOMERNAME VARCHAR(100)
);

CREATE TABLE ORDERS (
    ORDERID INT PRIMARY KEY,
    CUSTOMERID INT,
    ORDERDATE DATE,
    ORDERAMOUNT DECIMAL(10, 2),
    FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMERS(CUSTOMERID)
);

INSERT INTO CUSTOMERS VALUES
(1, 'ALICE'),
(2, 'BOB'),
(3, 'CHARLIE');

INSERT INTO ORDERS VALUES
(101, 1, '2024-12-10', 250.00),
(102, 1, '2025-01-05', 300.00),
(103, 2, '2025-02-15', 150.00),
(104, 3, '2025-01-20', 400.00),
(105, 3, '2025-03-10', 450.00);

-- FETCH LATEST ORDER PER CUSTOMER
SELECT 
    C.CUSTOMERID,
    C.CUSTOMERNAME,
    O.ORDERDATE
FROM 
    CUSTOMERS C
JOIN 
    ORDERS O ON C.CUSTOMERID = O.CUSTOMERID
WHERE 
    O.ORDERDATE = (
        SELECT MAX(O2.ORDERDATE)
        FROM ORDERS O2
        WHERE O2.CUSTOMERID = C.CUSTOMERID
    );

-- ENHANCEMENT: INCLUDE ORDER AMOUNT
SELECT 
    C.CUSTOMERID,
    C.CUSTOMERNAME,
    O.ORDERDATE,
    O.ORDERAMOUNT
FROM 
    CUSTOMERS C
JOIN 
    ORDERS O ON C.CUSTOMERID = O.CUSTOMERID
WHERE 
    O.ORDERDATE = (
        SELECT MAX(O2.ORDERDATE)
        FROM ORDERS O2
        WHERE O2.CUSTOMERID = C.CUSTOMERID
    );

-- ENHANCEMENT: INDEX FOR PERFORMANCE
CREATE INDEX IDX_ORDERS_ORDERDATE ON ORDERS (CUSTOMERID, ORDERDATE DESC);

SET STATISTICS IO ON;

SELECT 
    C.CUSTOMERID,
    C.CUSTOMERNAME,
    O.ORDERDATE,
    O.ORDERAMOUNT
FROM 
    CUSTOMERS C
JOIN 
    ORDERS O ON C.CUSTOMERID = O.CUSTOMERID
WHERE 
    O.ORDERDATE = (
        SELECT MAX(O2.ORDERDATE)
        FROM ORDERS O2
        WHERE O2.CUSTOMERID = C.CUSTOMERID
    );

SET STATISTICS IO OFF;

--------------------------------------------------------------------------------

/* 
LAB ACTIVITY 3: CREATING A STORED PROCEDURE FOR DYNAMIC SALES REPORTS 
OBJECTIVE: RETURN TOTAL SALES FOR A GIVEN YEAR 
*/

DROP TABLE IF EXISTS SALES;

CREATE TABLE SALES (
    SALEID INT PRIMARY KEY,
    PRODUCTNAME VARCHAR(100),
    REGION VARCHAR(50),
    SALEAMOUNT DECIMAL(10, 2),
    SALEDATE DATE
);

INSERT INTO SALES VALUES
(1, 'LAPTOP', 'NORTH', 1200.00, '2022-02-15'),
(2, 'LAPTOP', 'SOUTH', 1300.00, '2022-06-20'),
(3, 'MOBILE', 'NORTH', 800.00, '2022-01-10'),
(4, 'TABLET', 'EAST', 600.00, '2023-03-12'),
(5, 'MOBILE', 'WEST', 900.00, '2022-09-30'),
(6, 'LAPTOP', 'NORTH', 1500.00, '2021-12-25');

-- BASIC STORED PROCEDURE
DROP PROCEDURE IF EXISTS GETTOTALSALESBYYEAR;
GO

CREATE PROCEDURE GETTOTALSALESBYYEAR
    @YEAR INT
AS
BEGIN
    SELECT 
        PRODUCTNAME,
        SUM(SALEAMOUNT) TOTALSALES
    FROM SALES
    WHERE YEAR(SALEDATE) = @YEAR
    GROUP BY PRODUCTNAME;
END;

EXEC GETTOTALSALESBYYEAR @YEAR = 2022;

-- ENHANCEMENT: SALES PER REGION
DROP PROCEDURE IF EXISTS GETTOTALSALESBYREGION;
GO

CREATE PROCEDURE GETTOTALSALESBYREGION
    @YEAR INT
AS
BEGIN
    SELECT 
        REGION,
        PRODUCTNAME,
        SUM(SALEAMOUNT) TOTALSALES
    FROM SALES
    WHERE YEAR(SALEDATE) = @YEAR
    GROUP BY REGION, PRODUCTNAME
    ORDER BY REGION, PRODUCTNAME;
END;

EXEC GETTOTALSALESBYREGION @YEAR = 2022;

-- ENHANCEMENT: ERROR HANDLING WITH TRY...CATCH
DROP PROCEDURE IF EXISTS GETSAFESALESREPORT;
GO

CREATE PROCEDURE GETSAFESALESREPORT
    @YEAR INT
AS
BEGIN
    BEGIN TRY
        IF @YEAR NOT BETWEEN 2000 AND YEAR(GETDATE())
        BEGIN
            RAISERROR('INVALID YEAR. PLEASE ENTER A YEAR BETWEEN 2000 AND CURRENT YEAR.', 16, 1);
            RETURN;
        END

        SELECT 
            REGION,
            PRODUCTNAME,
            SUM(SALEAMOUNT) TOTALSALES
        FROM SALES
        WHERE YEAR(SALEDATE) = @YEAR
        GROUP BY REGION, PRODUCTNAME;
    END TRY
    BEGIN CATCH
        PRINT 'ERROR OCCURRED: ' + ERROR_MESSAGE();
    END CATCH
END;

EXEC GETSAFESALESREPORT @YEAR = 2022;
EXEC GETSAFESALESREPORT @YEAR = 1999;

--------------------------------------------------------------------------------

/* 
STORED PROCEDURE: EMPLOYEE BONUS CALCULATION 
OBJECTIVE: CALCULATE BONUS BASED ON SALARY AND PERFORMANCE RATING 
*/

CREATE PROCEDURE CALCULATEEMPLOYEEBONUS
    @BASESALARY DECIMAL(10, 2),
    @PERFORMANCERATING INT,
    @BONUSAMOUNT DECIMAL(10, 2) OUTPUT
AS
BEGIN
    DECLARE @BONUSPERCENT DECIMAL(5, 2);

    IF @BASESALARY < 30000
    BEGIN
        SET @BONUSPERCENT = 
            CASE 
                WHEN @PERFORMANCERATING >= 4 THEN 0.10
                WHEN @PERFORMANCERATING = 3 THEN 0.07
                ELSE 0.05
            END;
    END
    ELSE IF @BASESALARY BETWEEN 30000 AND 60000
    BEGIN
        SET @BONUSPERCENT = 
            CASE 
                WHEN @PERFORMANCERATING >= 4 THEN 0.08
                WHEN @PERFORMANCERATING = 3 THEN 0.05
                ELSE 0.03
            END;
    END
    ELSE
    BEGIN
        SET @BONUSPERCENT = 
            CASE 
                WHEN @PERFORMANCERATING >= 4 THEN 0.06
                WHEN @PERFORMANCERATING = 3 THEN 0.04
                ELSE 0.02
            END;
    END

    SET @BONUSAMOUNT = @BASESALARY * @BONUSPERCENT;
END;

DECLARE @FINALBONUS DECIMAL(10, 2);

EXEC CALCULATEEMPLOYEEBONUS 
    @BASESALARY = 45000, 
    @PERFORMANCERATING = 4, 
    @BONUSAMOUNT = @FINALBONUS OUTPUT;

SELECT @FINALBONUS BONUSAMOUNT;
