-- LAB ACTIVITY 1: RANKING FUNCTIONS

-- 1. CREATE EMPLOYEES TABLE
CREATE TABLE EMPLOYEES (
EMPLOYEEID INT PRIMARY KEY,
FIRSTNAME VARCHAR(50),
LASTNAME VARCHAR(50),
DEPARTMENT VARCHAR(50),
SALARY DECIMAL(10, 2)
);

-- INSERT SAMPLE DATA
INSERT INTO EMPLOYEES (EMPLOYEEID, FIRSTNAME, LASTNAME, DEPARTMENT, SALARY)
VALUES
(1, 'BISWANTH', 'CH', 'HR', 50000),
(2, 'HARSHITH', 'PAVAN', 'HR', 55000),
(3, 'NAGESWAR', 'RAO', 'IT', 70000),
(4, 'ILIAZ', 'KHAN', 'IT', 70000),
(5, 'ARSHAD', 'SHAIK', 'IT', 60000),
(6, 'NITEESH', 'KUMAR', 'FINANCE', 65000);

-- 2. RANK() BASED ON SALARY WITHIN EACH DEPARTMENT
SELECT
EMPLOYEEID,
FIRSTNAME,
LASTNAME,
DEPARTMENT,
SALARY,
RANK() OVER (PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS SALARY_RANK
FROM EMPLOYEES;

-- 3. COMPARE RANK() AND DENSE_RANK()
SELECT
EMPLOYEEID,
FIRSTNAME,
LASTNAME,
DEPARTMENT,
SALARY,
RANK() OVER (PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS RANK_RESULT,
DENSE_RANK() OVER (PARTITION BY DEPARTMENT ORDER BY SALARY DESC) AS DENSE_RANK_RESULT
FROM EMPLOYEES;

-- 4. ROW_NUMBER() FOR SEQUENTIAL NUMBERING
SELECT
EMPLOYEEID,
FIRSTNAME,
LASTNAME,
DEPARTMENT,
SALARY,
ROW_NUMBER() OVER (ORDER BY EMPLOYEEID) AS ROW_NUM
FROM EMPLOYEES;

-----------------------------------------------------------------------------------------------------------------------------------

-- LAB ACTIVITY 2: SUBQUERIES

-- 1. CREATE SALES TABLE
CREATE TABLE SALES (
SALEID INT PRIMARY KEY,
SALESPERSONID INT,
REGION VARCHAR(50),
TOTALSALES DECIMAL(10, 2)
);

-- INSERT SAMPLE DATA
INSERT INTO SALES (SALEID, SALESPERSONID, REGION, TOTALSALES)
VALUES
(1, 201, 'NORTH', 12000),
(2, 202, 'NORTH', 15000),
(3, 203, 'NORTH', 8000),
(4, 204, 'SOUTH', 17000),
(5, 205, 'SOUTH', 13500),
(6, 206, 'SOUTH', 11000),
(7, 207, 'EAST', 6000),
(8, 208, 'EAST', 5000);

-- 2. FIND SALESPEOPLE EXCEEDING REGIONAL AVERAGE
SELECT
S1.SALESPERSONID,
S1.REGION,
S1.TOTALSALES
FROM
SALES S1
WHERE
S1.TOTALSALES > (
SELECT AVG(S2.TOTALSALES)
FROM SALES S2
WHERE S2.REGION = S1.REGION
);

-- 3. SHOW SALESPERSON'S RANK WITHIN REGION
SELECT
SALESPERSONID,
REGION,
TOTALSALES,
(SELECT COUNT(*)
FROM SALES S2
WHERE S2.REGION = S1.REGION AND S2.TOTALSALES >= S1.TOTALSALES) AS REGIONAL_RANK
FROM
SALES S1
ORDER BY
REGION, REGIONAL_RANK;

-----------------------------------------------------------------------------------------------------------------------------------

-- LAB ACTIVITY 3: STORED PROCEDURES

-- 1. CREATE PROCEDURE TO GET HIGH EARNING EMPLOYEES
CREATE PROCEDURE GET_HIGH_EARNERS
@SALARY_THRESHOLD DECIMAL(10,2)
AS
BEGIN
SELECT
EMPLOYEEID,
FIRSTNAME,
LASTNAME,
DEPARTMENT,
SALARY
FROM
EMPLOYEES
WHERE
SALARY > @SALARY_THRESHOLD
ORDER BY SALARY DESC;
END;

-- 2. CREATE PROCEDURE TO UPDATE SALARIES BY DEPARTMENT
CREATE PROCEDURE UPDATE_DEPT_SALARY
@DEPT_NAME VARCHAR(50),
@INCREASE_PERCENT DECIMAL(5,2)
AS
BEGIN
UPDATE EMPLOYEES
SET SALARY = SALARY * (1 + @INCREASE_PERCENT/100)
WHERE DEPARTMENT = @DEPT_NAME;
END;

-- 3. TEST THE PROCEDURES
EXEC GET_HIGH_EARNERS @SALARY_THRESHOLD = 60000;
EXEC UPDATE_DEPT_SALARY @DEPT_NAME = 'FINANCE', @INCREASE_PERCENT = 10;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT = 'FINANCE';

-----------------------------------------------------------------------------------------------------------------------------------

-- LAB ACTIVITY 4: LAG FUNCTION

-- 1. CREATE MONTHLYSALES TABLE
CREATE TABLE MONTHLYSALES (
MONTH VARCHAR(20),
REGION VARCHAR(50),
TOTALSALES DECIMAL(10, 2)
);

-- INSERT SAMPLE DATA
INSERT INTO MONTHLYSALES (MONTH, REGION, TOTALSALES)
VALUES
('JANUARY', 'NORTH', 10500),
('FEBRUARY', 'NORTH', 12500),
('MARCH', 'NORTH', 11500),
('JANUARY', 'SOUTH', 8200),
('FEBRUARY', 'SOUTH', 7800),
('MARCH', 'SOUTH', 8800),
('APRIL', 'NORTH', 13000),
('APRIL', 'SOUTH', 9000),
('MAY', 'NORTH', 14000),
('MAY', 'SOUTH', 9500);

-- 2. USE LAG() TO FIND MONTHLY SALES DIFFERENCES
SELECT
MONTH,
REGION,
TOTALSALES,
LAG(TOTALSALES) OVER (PARTITION BY REGION ORDER BY MONTH) AS PREV_MONTH_SALES,
TOTALSALES - LAG(TOTALSALES) OVER (PARTITION BY REGION ORDER BY MONTH) AS SALES_DIFF
FROM
MONTHLYSALES;

-- 3. IDENTIFY MONTHS WITH SALES DECREASE
SELECT
MONTH,
REGION,
TOTALSALES,
CASE
WHEN TOTALSALES < LAG(TOTALSALES) OVER (PARTITION BY REGION ORDER BY MONTH)
THEN 'DECREASE'
ELSE 'NO DECREASE'
END AS SALES_TREND
FROM
MONTHLYSALES;

-----------------------------------------------------------------------------------------------------------------------------------

-- LAB ACTIVITY 5: LEAD FUNCTION

-- 1. USED PREVIOUS TABLE (MONTHLY SALES TABLE)
-- 2. USE LEAD() TO PREDICT NEXT MONTH SALES
SELECT
MONTH,
REGION,
TOTALSALES,
LEAD(TOTALSALES) OVER (PARTITION BY REGION ORDER BY MONTH) AS NEXT_MONTH_PREDICTION
FROM
MONTHLYSALES;

-- 3. COMPARE CURRENT WITH PREDICTED SALES
SELECT
MONTH,
REGION,
TOTALSALES,
LEAD(TOTALSALES) OVER (PARTITION BY REGION ORDER BY MONTH) AS NEXT_MONTH_PREDICTION,
CASE
WHEN TOTALSALES < LEAD(TOTALSALES) OVER (PARTITION BY REGION ORDER BY MONTH)
THEN 'INCREASE EXPECTED'
WHEN TOTALSALES > LEAD(TOTALSALES) OVER (PARTITION BY REGION ORDER BY MONTH)
THEN 'DECREASE EXPECTED'
ELSE 'STABLE'
END AS SALES_FORECAST
FROM
MONTHLYSALES;

