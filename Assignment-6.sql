	USE DB;

-- ==========================================================================================
-- ASSIGNMENT 1: CUSTOMER ORDER MANAGEMENT
-- OBJECTIVE:
-- CREATE AND MANAGE STORED PROCEDURES FOR ORDER RETRIEVAL AND UPDATES IN A CUSTOMER DATABASE.
-- 
-- SETUP:
-- • CUSTOMERS TABLE: CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL, PHONENUMBER
-- • ORDERS TABLE: ORDERID, CUSTOMERID, ORDERDATE, ORDERTOTAL, ORDERSTATUS
-- 
-- TASK 1: GETCUSTOMERORDERS PROCEDURE
-- • ACCEPTS A CUSTOMERID AS A PARAMETER.
-- • RETURNS ALL ORDERS FOR THE SPECIFIED CUSTOMER, INCLUDING ORDERTOTAL AND ORDERSTATUS.
-- 
-- TASK 2: UPDATEORDERSTATUS PROCEDURE
-- • ACCEPTS PARAMETERS FOR ORDERID AND NEWSTATUS.
-- • UPDATES THE ORDERSTATUS FOR THE SPECIFIED ORDERID.
-- • RETURNS A CONFIRMATION MESSAGE UPON SUCCESSFUL UPDATE.
-- 
-- BONUS CHALLENGE:
-- • ADD VALIDATION TO ENSURE ORDERID EXISTS.
-- • RETURN A CUSTOM ERROR MESSAGE IF THE ORDERID IS INVALID.
-- ==========================================================================================

-- CREATE CUSTOMERS TABLE
CREATE TABLE CUSTOMERS (
    CUSTOMERID INT PRIMARY KEY,
    FIRSTNAME VARCHAR(25),
    LASTNAME VARCHAR(25),
    EMAIL VARCHAR(25),
    PHONENUMBER VARCHAR(25)
);

INSERT INTO CUSTOMERS (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL, PHONENUMBER) VALUES
(1, 'BISWANTH', 'CH', 'BISS@GMAIL.COM', '8330965896'),
(2, 'NAGESWARA RAO', 'N', 'NN@GMAIL.COM', '7093896106'),
(3, 'HARSHITH', 'S', 'HARSHITH@GMAIL.COM', '8074641549');

-- CREATE ORDERS TABLE
CREATE TABLE ORDERS (
    ORDERID INT PRIMARY KEY,
    CUSTOMERID INT FOREIGN KEY REFERENCES CUSTOMERS(CUSTOMERID),
    ORDERDATE DATE,
    ORDERTOTAL DECIMAL(10, 2),
    ORDERSTATUS VARCHAR(20)
);

INSERT INTO ORDERS (ORDERID, CUSTOMERID, ORDERDATE, ORDERTOTAL, ORDERSTATUS) VALUES
(101, 1, '2025-09-26', 175.34, 'PENDING'),
(102, 1, '2025-09-27', 69.34, 'SHIPPED'),
(103, 2, '2025-09-28', 120.00, 'PROCESSING'),
(104, 3, '2025-09-29', 45.50, 'DELIVERED'),
(105, 2, '2025-09-30', 60.00, 'CANCELLED');

-- STORED PROCEDURE: GETCUSTOMERORDERS
CREATE PROCEDURE GETCUSTOMERORDERS
    @CUSTOMERID INT
AS
BEGIN
    SELECT 
        O.ORDERID,
        O.ORDERDATE,
        O.ORDERTOTAL,
        O.ORDERSTATUS
    FROM ORDERS O
    WHERE O.CUSTOMERID = @CUSTOMERID;
END;

EXEC GETCUSTOMERORDERS @CUSTOMERID = 1;
GO

-- STORED PROCEDURE: UPDATEORDERSTATUS WITH VALIDATION
CREATE PROCEDURE UPDATEORDERSTATUS
    @ORDERID INT,
    @NEWSTATUS NVARCHAR(20)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM ORDERS WHERE ORDERID = @ORDERID)
    BEGIN
        UPDATE ORDERS
        SET ORDERSTATUS = @NEWSTATUS
        WHERE ORDERID = @ORDERID;

        SELECT 'ORDER STATUS UPDATED SUCCESSFULLY.' MESSAGE;
    END
    ELSE
    BEGIN
        SELECT 'ERROR: ORDERID DOES NOT EXIST.' MESSAGE;
    END
END;

EXEC UPDATEORDERSTATUS @ORDERID = 101, @NEWSTATUS = 'SHIPPED';
SELECT * FROM ORDERS;

-- ==========================================================================================
-- ASSIGNMENT 2: INVENTORY STOCK MANAGEMENT
-- OBJECTIVE:
-- DESIGN STORED PROCEDURES TO TRACK AND MANAGE PRODUCT INVENTORY IN A WAREHOUSE.
-- 
-- SETUP:
-- • PRODUCTS TABLE: PRODUCTID, PRODUCTNAME, CATEGORY, STOCKQUANTITY, PRICE
-- 
-- TASK 1: GETLOWSTOCKPRODUCTS PROCEDURE
-- • ACCEPTS A THRESHOLD VALUE AS A PARAMETER.
-- • RETRIEVES ALL PRODUCTS WITH STOCKQUANTITY BELOW THE GIVEN THRESHOLD.
-- 
-- TASK 2: RESTOCKPRODUCT PROCEDURE
-- • ACCEPTS PRODUCTID AND QUANTITYTOADD AS PARAMETERS.
-- • INCREASES THE STOCKQUANTITY FOR THE GIVEN PRODUCTID.
-- • RETURNS THE UPDATED STOCKQUANTITY.
-- 
-- BONUS CHALLENGE:
-- • LOG THE RESTOCKING ACTIVITY INTO A RESTOCKLOG TABLE.
--   COLUMNS: LOGID, PRODUCTID, RESTOCKDATE, QUANTITYADDED
-- ==========================================================================================

-- CREATE PRODUCTS TABLE
CREATE TABLE PRODUCTS (
    PRODUCTID INT PRIMARY KEY,
    PRODUCTNAME VARCHAR(100),
    CATEGORY NVARCHAR(50),
    STOCKQUANTITY INT,
    PRICE DECIMAL(10, 2)
);

INSERT INTO PRODUCTS (PRODUCTID, PRODUCTNAME, CATEGORY, STOCKQUANTITY, PRICE) VALUES
(1, 'LAPTOP', 'ELECTRONICS', 10, 15.99),
(2, 'SMART PHONE', 'ELECTRONICS', 25, 9.49),
(3, 'BOOKS', 'STATIONERY', 100, 3.25),
(4, 'PENCIL', 'STATIONERY', 10, 0.99);

-- STORED PROCEDURE: GETLOWSTOCKPRODUCTS
CREATE PROCEDURE GETLOWSTOCKPRODUCTS
    @THRESHOLDVALUE INT
AS
BEGIN
    SELECT 
        P.PRODUCTID,
        P.PRODUCTNAME,
        P.CATEGORY,
        P.STOCKQUANTITY,
        P.PRICE
    FROM PRODUCTS P
    WHERE P.STOCKQUANTITY < @THRESHOLDVALUE;
END;

EXEC GETLOWSTOCKPRODUCTS @THRESHOLDVALUE = 100;

-- CREATE RESTOCK LOG TABLE
CREATE TABLE RESTOCKLOGG (
    LOGID INT IDENTITY(1,1) PRIMARY KEY,
    PRODUCTID INT FOREIGN KEY REFERENCES PRODUCTS(PRODUCTID),
    RESTOCKDATE DATETIME,
    QUANTITYADDED INT
);

-- STORED PROCEDURE: RESTOCKPRODUCT WITH LOGGING
CREATE PROCEDURE RESTOCKPRODUCT
    @PID INT,
    @QUANTITYTOADD INT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM PRODUCTS WHERE PRODUCTID = @PID)
    BEGIN
        UPDATE PRODUCTS
        SET STOCKQUANTITY = STOCKQUANTITY + @QUANTITYTOADD
        WHERE PRODUCTID = @PID;

        INSERT INTO RESTOCKLOGG (PRODUCTID, RESTOCKDATE, QUANTITYADDED)
        VALUES (@PID, GETDATE(), @QUANTITYTOADD);

        SELECT 
            P.PRODUCTID,
            P.PRODUCTNAME,
            P.STOCKQUANTITY
        FROM PRODUCTS P
        WHERE P.PRODUCTID = @PID;
    END
    ELSE
    BEGIN
        SELECT 'ERROR: PRODUCTID DOES NOT EXIST.' MESSAGE;
    END
END;
GO

EXEC RESTOCKPRODUCT @PID = 1, @QUANTITYTOADD = 100;

SELECT * FROM RESTOCKLOGG;
SELECT * FROM PRODUCTS;
