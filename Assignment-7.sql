-- 1. PIVOT 
-- OBJECTIVE: TRANSFORM ROW DATA INTO COLUMNS USING PIVOT. 
-- TASK: 
-- • CREATE A TABLE: SALES(REGION, PRODUCT, YEAR, SALESAMOUNT) 
-- • POPULATE WITH SAMPLE DATA. 
-- • WRITE A QUERY TO PIVOT DATA: DISPLAY TOTAL SALESAMOUNT FOR EACH PRODUCT, WITH EACH YEAR AS A COLUMN. 
-- • REVERSE THE PIVOT USING UNPIVOT.

CREATE TABLE SALES (
    REGION VARCHAR(50),
    PRODUCT VARCHAR(50),
    YEAR INT,
    SALESAMOUNT INT
);

INSERT INTO SALES (REGION, PRODUCT, YEAR, SALESAMOUNT) VALUES
('NORTH', 'LAPTOP', 2022, 1000),
('SOUTH', 'MOUSE', 2022, 200),
('SOUTH', 'LAPTOP', 2022, 800),
('NORTH', 'MOUSE', 2023, 350),
('EAST', 'LAPTOP', 2023, 1100),
('WEST', 'LAPTOP', 2022, 950),
('EAST', 'MOUSE', 2023, 270),
('WEST', 'MOUSE', 2023, 320);

SELECT PRODUCT, [2022] SALES_2022, [2023] SALES_2023
FROM (
    SELECT PRODUCT, YEAR, SALESAMOUNT
    FROM SALES
) SOURCE_TABLE
PIVOT (
    SUM(SALESAMOUNT) FOR YEAR IN ([2022], [2023])
) PIVOT_TABLE;

SELECT PRODUCT, YEAR, SALESAMOUNT
FROM (
    SELECT PRODUCT, [2022], [2023]
    FROM (
        SELECT PRODUCT, YEAR, SALESAMOUNT
        FROM SALES
    ) SOURCE_TABLE
    PIVOT (
        SUM(SALESAMOUNT) FOR YEAR IN ([2022], [2023])
    ) PIVOTED
) PIVOT_RESULT
UNPIVOT (
    SALESAMOUNT FOR YEAR IN ([2022], [2023])
) UNPIVOTED;


-- 2. SELECT INTO 
-- OBJECTIVE: CREATE A NEW TABLE FROM AN EXISTING TABLE. 
-- TASK: 
-- • CREATE TABLE: EMPLOYEES(EMPLOYEEID, NAME, DEPARTMENT, SALARY) 
-- • INSERT SAMPLE DATA. 
-- • USE SELECT INTO TO CREATE HIGHSALARYEMPLOYEES FOR SALARIES ABOVE 60,000. 
-- • VERIFY STRUCTURE AND DATA OF THE NEW TABLE.

-- CREATE EMPLOYEES TABLE
CREATE TABLE EMPLOYEES (
    EMPLOYEEID INT PRIMARY KEY,
    NAME VARCHAR(50),
    DEPARTMENT VARCHAR(50),
    SALARY INT
);

-- INSERT SAMPLE DATA
INSERT INTO EMPLOYEES (EMPLOYEEID, NAME, DEPARTMENT, SALARY) VALUES
(1, 'BISWANTH', 'HR', 55000),
(2, 'NAGIS', 'FINANCE', 72000),
(3, 'HARSHITH', 'IT', 67000),
(4, 'NITEESH', 'MARKETING', 45000),
(5, 'DHEERAJ', 'IT', 88000),
(6, 'YASHWANTH', 'SUPPORT', 39000),
(7, 'MANIKANTA', 'HR', 61000);

-- CREATE HIGHSALARYEMPLOYEES TABLE USING SELECT INTO
SELECT * 
INTO HIGHSALARYEMPLOYEES
FROM EMPLOYEES
WHERE SALARY > 60000;

-- VIEW DATA IN HIGHSALARYEMPLOYEES
SELECT * FROM HIGHSALARYEMPLOYEES;


-- 3. CASE 
-- OBJECTIVE: USE CASE STATEMENTS FOR CONDITIONAL LOGIC. 
-- TASK: 
-- • USE EMPLOYEES TABLE. 
-- • CLASSIFY EMPLOYEES: 
--     o "LOW" FOR SALARY < 40,000 
--     o "MEDIUM" FOR 40,000–60,000 
--     o "HIGH" FOR SALARY > 60,000 
-- • ADD A SALARYRANGE COLUMN USING CASE.

SELECT 
    EMPLOYEEID, NAME, DEPARTMENT, SALARY,
    CASE 
        WHEN SALARY < 40000 THEN 'LOW'
        WHEN SALARY BETWEEN 40000 AND 60000 THEN 'MEDIUM'
        WHEN SALARY IS NULL THEN 'ITS NULL'
        ELSE 'HIGH'
    END SALARYRANGE
FROM EMPLOYEES;


-- 4. COALESCE 
-- OBJECTIVE: HANDLE NULL VALUES USING COALESCE. 
-- TASK: 
-- • CREATE TABLE: ORDERS(ORDERID, CUSTOMERNAME, ORDERDATE, SHIPPEDDATE) 
-- • INSERT DATA WITH SOME NULL IN SHIPPEDDATE. 
-- • REPLACE NULL IN SHIPPEDDATE WITH "NOT SHIPPED" USING COALESCE. 
-- • ADD DELIVERYSTATUS: 
--     o "DELIVERED" IF SHIPPEDDATE IS NOT NULL 
--     o "PENDING" IF NULL 

-- CREATE THE ORDERS TABLE
CREATE TABLE ORDERS (
    ORDERID INT PRIMARY KEY,
    CUSTOMERNAME VARCHAR(100),
    ORDERDATE DATE,
    SHIPPEDDATE DATE
);

-- INSERT SAMPLE DATA (SOME SHIPPEDDATE VALUES ARE NULL)
INSERT INTO ORDERS (ORDERID, CUSTOMERNAME, ORDERDATE, SHIPPEDDATE) VALUES
(1, 'BISWANTH', '2025-05-12', '2025-04-05'),
(2, 'NAGI', '2025-04-27', NULL),
(3, 'HARSHITH', '2025-06-15', '2025-04-06'),
(4, 'NITEESH', '2025-04-06', NULL),
(5, 'DHEERAJ', '2025-04-07', '2025-04-09');

-- QUERY WITH COALESCE AND CONDITIONAL COLUMN
SELECT 
    ORDERID,
    CUSTOMERNAME,
    ORDERDATE,
    COALESCE(CONVERT(VARCHAR, SHIPPEDDATE, 23), 'NOT SHIPPED') SHIPPEDSTATUS,
    CASE 
        WHEN SHIPPEDDATE IS NOT NULL THEN 'DELIVERED'
        ELSE 'PENDING'
    END DELIVERYSTATUS
FROM ORDERS;


-- 5. NULLIF 
-- OBJECTIVE: HANDLE DIVISION ERRORS USING NULLIF. 
-- TASK: 
-- • CREATE TABLE: SCORES(STUDENTID, SUBJECT, MARKSOBTAINED, MAXIMUMMARKS) 
-- • CALCULATE PERCENTAGE = (MARKSOBTAINED * 100) / MAXIMUMMARKS 
-- • USE NULLIF(MAXIMUMMARKS, 0) TO AVOID DIVISION BY ZERO.

-- CREATE THE SCORES TABLE
CREATE TABLE SCORES (
    STUDENTID INT,
    SUBJECT VARCHAR(50),
    MARKSOBTAINED INT,
    MAXIMUMMARKS INT
);

-- INSERT SAMPLE DATA (INCLUDING A ZERO IN MAXIMUMMARKS)
INSERT INTO SCORES (STUDENTID, SUBJECT, MARKSOBTAINED, MAXIMUMMARKS) VALUES
(1, 'SOCIAL', 70, 100),
(2, 'BIOLOGY', 90, 100),
(3, 'HISTORY', 70, 0),
(4, 'ENGLISH', 90, 100),
(5, 'TELUGU', 95, 0);

-- QUERY USING NULLIF TO PREVENT DIVISION BY ZERO
SELECT 
    STUDENTID,
    SUBJECT,
    MARKSOBTAINED,
    MAXIMUMMARKS,
    (MARKSOBTAINED * 100.0) / NULLIF(MAXIMUMMARKS, 0) PERCENTAGE
FROM SCORES;


-- 6. DDL STATEMENTS WITH CONSTRAINTS 
-- OBJECTIVE: USE CONSTRAINTS LIKE UNIQUE, CHECK, NOT NULL, AND FOREIGN KEY. 
-- TASK: 
-- • CREATE DEPARTMENTS TABLE: 
--     o DEPARTMENTID (PK), DEPARTMENTNAME (UNIQUE) 
-- • CREATE STAFF TABLE: 
--     o STAFFID (PK), STAFFNAME (NOT NULL), DEPARTMENTID (FK), AGE (CHECK AGE > 18) 
-- • INSERT VALID AND INVALID DATA TO TEST CONSTRAINTS.

-- CREATE DEPARTMENTS TABLE WITH CONSTRAINTS
CREATE TABLE DEPARTMENTS (
    DEPARTMENTID INT PRIMARY KEY,
    DEPARTMENTNAME VARCHAR(100) UNIQUE
);

-- CREATE STAFF TABLE WITH CONSTRAINTS
CREATE TABLE STAFF (
    STAFFID INT PRIMARY KEY,
    STAFFNAME VARCHAR(100) NOT NULL,
    DEPARTMENTID INT,
    AGE INT CHECK (AGE > 18),
    FOREIGN KEY (DEPARTMENTID) REFERENCES DEPARTMENTS(DEPARTMENTID)
);

-- INSERT VALID DATA INTO DEPARTMENTS
INSERT INTO DEPARTMENTS (DEPARTMENTID, DEPARTMENTNAME) VALUES
(1, 'CLOUD LABS'),
(2, 'SAASIFY'),
(3, 'C3');

-- INSERT VALID DATA INTO STAFF
INSERT INTO STAFF (STAFFID, STAFFNAME, DEPARTMENTID, AGE) VALUES
(101, 'BISS', 1, 45),
(102, 'NAG', 2, 90),
(103, 'NITEESH', 3, 25);

-- 1. PRIMARY KEY VIOLATION (DUPLICATE STAFFID)
INSERT INTO STAFF (STAFFID, STAFFNAME, DEPARTMENTID, AGE)
VALUES (101, 'DUPLICATEID', 1, 29);

-- 2. UNIQUE CONSTRAINT VIOLATION (DUPLICATE DEPARTMENTNAME)
INSERT INTO DEPARTMENTS (DEPARTMENTID, DEPARTMENTNAME)
VALUES (4, 'HR');

-- 3. NOT NULL VIOLATION (NULL STAFFNAME)
INSERT INTO STAFF (STAFFID, STAFFNAME, DEPARTMENTID, AGE)
VALUES (104, NULL, 2, 22);

-- 4. CHECK CONSTRAINT VIOLATION (AGE <= 18)
INSERT INTO STAFF (STAFFID, STAFFNAME, DEPARTMENTID, AGE)
VALUES (105, 'BISS', 2, 17);

-- 5. FOREIGN KEY VIOLATION (NON-EXISTENT DEPARTMENTID)
INSERT INTO STAFF (STAFFID, STAFFNAME, DEPARTMENTID, AGE)
VALUES (106, 'DHEERAJ', 99, 27);


-- 7. TRUNCATE AND DROP 
-- OBJECTIVE: UNDERSTAND TRUNCATE VS DROP. 
-- TASK: 
-- • CREATE AND POPULATE TEMPORARYDATA TABLE. 
-- • USE TRUNCATE – DATA REMOVED, STRUCTURE REMAINS. 
-- • USE DROP – TABLE DELETED ENTIRELY.

-- CREATE THE TEMPORARYDATA TABLE
CREATE TABLE TEMPORARYDATA (
    ID INT,
    NAME VARCHAR(50)
);

-- INSERT SOME TEST DATA
INSERT INTO TEMPORARYDATA (ID, NAME) VALUES
(1, 'NAME1'),
(2, 'NAME2'),
(3, 'NAME3');

SELECT * FROM TEMPORARYDATA;

TRUNCATE TABLE TEMPORARYDATA;

SELECT * FROM TEMPORARYDATA;

DROP TABLE TEMPORARYDATA;

SELECT * FROM TEMPORARYDATA;


-- 8. DATA TYPES 
-- OBJECTIVE: EXPERIMENT WITH SQL DATA TYPES. 
-- TASK: 
-- • CREATE PRODUCTS TABLE: 
--     o PRODUCTID (INT, PK), PRODUCTNAME (VARCHAR(50), NOT NULL), PRICE (DECIMAL(10,2)), STOCKQUANTITY (SMALLINT), LAUNCHDATE (DATE) 
-- • INSERT VALID DATA. 
-- • TRY INSERTING INVALID DATA TYPES (E.G., TEXT INTO PRICE, STRING INTO LAUNCHDATE) AND OBSERVE ERRORS.

-- CREATE THE PRODUCTS TABLE
CREATE TABLE PRODUCTS (
    PRODUCTID INT PRIMARY KEY,
    PRODUCTNAME VARCHAR(50) NOT NULL,
    PRICE DECIMAL(10, 2),
    STOCKQUANTITY SMALLINT,
    LAUNCHDATE DATE
);

-- INSERT VALID DATA
INSERT INTO PRODUCTS (PRODUCTID, PRODUCTNAME, PRICE, STOCKQUANTITY, LAUNCHDATE) VALUES
(1, 'LAPTOP', 59999.99, 50, '2023-10-01'),
(2, 'SMARTPHONE', 29999.50, 150, '2024-01-15'),
(3, 'TABLET', 19999.00, 80, '2023-12-05');

SELECT * FROM PRODUCTS;

-- INSERTING TEXT INTO PRICE (SHOULD BE DECIMAL)
INSERT INTO PRODUCTS (PRODUCTID, PRODUCTNAME, PRICE, STOCKQUANTITY, LAUNCHDATE)
VALUES (4, 'CAMERA', 'TWENTYTHOUSAND', 30, '2024-03-10');

-- INSERTING STRING INTO LAUNCHDATE (SHOULD BE DATE)
INSERT INTO PRODUCTS (PRODUCTID, PRODUCTNAME, PRICE, STOCKQUANTITY, LAUNCHDATE)
VALUES (5, 'MONITOR', 8999.99, 60, 'NOTADATE');

-- PRODUCTNAME IS NOT NULL BUT VALUE IS MISSING
INSERT INTO PRODUCTS (PRODUCTID, PRICE, STOCKQUANTITY, LAUNCHDATE)
VALUES (6, 4999.00, 20, '2024-05-01');

-- STOCKQUANTITY OUT OF SMALLINT RANGE (-32,768 TO 32,767)
INSERT INTO PRODUCTS (PRODUCTID, PRODUCTNAME, PRICE, STOCKQUANTITY, LAUNCHDATE)
VALUES (7, 'HEAVY PRODUCT', 150000.00, 50000, '2024-06-10');
